{
  
    
        "post0": {
            "title": "Using open-source threat intelligence from Alienware OTX to prioritize the vulnerabilities remediation",
            "content": "Install/import libraries . #!pip install OTXv2 . import pandas as pd from pandas import json_normalize from OTXv2 import OTXv2, IndicatorTypes from datetime import datetime, timedelta . Define some helper functions . def indicators_by_type(pulses_df, unique = False): &#39;&#39;&#39;Aggregate the indicators in a DataFrame of pulses by type &#39;&#39;&#39; ind_types = [] ind_counts ={} ind_ids = {} for i, r in pulses_df.iterrows(): for ind in r[&#39;indicators&#39;]: #display (ind) if ind[&#39;type&#39;] in ind_types: if not unique: ind_counts [ind[&#39;type&#39;]] = ind_counts [ind[&#39;type&#39;]] +1 else: ind_ids[ind[&#39;type&#39;]].add(ind[&#39;id&#39;]) else: ind_types.append(ind[&#39;type&#39;]) if not unique: ind_counts [ind[&#39;type&#39;]] = 1 else: ind_ids[ind[&#39;type&#39;]] = set([ind[&#39;id&#39;]]) if not unique: return ind_counts else: for k,v in ind_ids.items(): ind_counts[k]=len(v) return ind_counts . def filter_indicators_by_type(pulses_df, filter_type): filtered_ind = [] for i, r in pulses_df.iterrows(): for ind in r[&#39;indicators&#39;]: # display (ind) if ind[&#39;type&#39;] == filter_type: filtered_ind.append(ind) return filtered_ind . def indicators_for_cve(CVE, unique=False): cve_pulse_df = json_normalize(otx.search_pulses(CVE)[&quot;results&quot;]) return indicators_by_type(cve_pulse_df, unique = unique) . Main section . from OTXv2 import OTXv2 from OTXv2 import IndicatorTypes otx = OTXv2(&quot;INSERT_YOUR_OTX_API_KEY&quot;) . &#39;indicators = otx.get_pulse_indicators(&#34;pulse_id&#34;) nfor indicator in indicators: n print (indicator[&#34;indicator&#34;] + indicator[&#34;type&#34;]) n# Get everything OTX knows about google.com notx.get_indicator_details_full(IndicatorTypes.DOMAIN, &#34;google.com&#34;)&#39; . Get all OTX pulses for the last 90 days . res = json_normalize(otx.getsince((datetime.now() - timedelta(days=90)).isoformat())) display(len(res)) res.columns . 1064 . Index([&#39;industries&#39;, &#39;tlp&#39;, &#39;description&#39;, &#39;created&#39;, &#39;tags&#39;, &#39;malware_families&#39;, &#39;modified&#39;, &#39;author_name&#39;, &#39;public&#39;, &#39;extract_source&#39;, &#39;references&#39;, &#39;targeted_countries&#39;, &#39;indicators&#39;, &#39;attack_ids&#39;, &#39;more_indicators&#39;, &#39;revision&#39;, &#39;adversary&#39;, &#39;id&#39;, &#39;name&#39;], dtype=&#39;object&#39;) . Get indicators summary for a specific CVE . indicators_for_cve(&#39;CVE-2020-10189&#39;) . {&#39;URL&#39;: 215, &#39;FileHash-SHA256&#39;: 700, &#39;hostname&#39;: 70, &#39;IPv4&#39;: 363, &#39;CVE&#39;: 41, &#39;FileHash-MD5&#39;: 225, &#39;YARA&#39;: 21, &#39;domain&#39;: 261, &#39;FileHash-SHA1&#39;: 105, &#39;email&#39;: 12} . From the list of pulses we downloaded, let&#39;s get all CVE indicators for vulnerabilities reported in 2019 or 2020. The reason to ecxclude oder vulnerabilities is that they will have a much longer timeline of reporting and will heavily skew the statistics . CVE_OTX = set([i[&#39;indicator&#39;] for i in filter_indicators_by_type(res, &#39;CVE&#39;) if &#39;2019&#39; in i[&#39;indicator&#39;] or &#39;2020&#39; in i[&#39;indicator&#39;]]) len(CVE_OTX) . 16 . Now let&#39;s get the unique indicators by type for each of these CVEs . CVE_stats = {} for CVE in CVE_OTX: CVE_stats[CVE] = indicators_for_cve(CVE, unique = True) . Worth checking that we have got the data for all CVEs, as some API calls can fail due to rate limiting . len(set(CVE_OTX)) . 16 . CVE_totals={} for c, s in CVE_stats.items(): CVE_totals[c]=sum(s.values()) CVE_totals_sorted = sorted (CVE_totals.items(), key = lambda x: x[1], reverse=True) . Sorting the CVE list by the total number of unique indicators reported . CVE_sorted = [c[0] for c in CVE_totals_sorted] totals_sorted = [c[1] for c in CVE_totals_sorted] . Group similar indicators types (e.g., file hashes, domains/hostnames) for clarity . ip_sorted = [] file_sorted = [] URL_sorted = [] domain_sorted = [] email_sorted = [] yara_sorted = [] for c in CVE_sorted: if &#39;IPv4&#39; in CVE_stats[c].keys(): ip_sorted.append(CVE_stats[c][&#39;IPv4&#39;]) else: ip_sorted.append(0) if &#39;email&#39; in CVE_stats[c].keys(): email_sorted.append(CVE_stats[c][&#39;email&#39;]) else: email_sorted.append(0) if &#39;URL&#39; in CVE_stats[c].keys(): URL_sorted.append(CVE_stats[c][&#39;URL&#39;]) else: URL_sorted.append(0) if &#39;YARA&#39; in CVE_stats[c].keys(): yara_sorted.append(CVE_stats[c][&#39;YARA&#39;]) else: yara_sorted.append(0) f=0 for t in [&#39;FileHash-SHA256&#39;, &#39;FileHash-MD5&#39;, &#39;FileHash-SHA1&#39;]: if t in CVE_stats[c].keys(): f = f + CVE_stats[c][t] file_sorted.append(f) d=0 for t in [&#39;hostname&#39;, &#39;domain&#39;]: if t in CVE_stats[c].keys(): d = d + CVE_stats[c][t] domain_sorted.append(d) . As the final step, we will plot our grouped, sorted data using plotly. Annotations are added manually to provide a short description for the top CVEs . import plotly.graph_objects as go fig = go.Figure( data=[ go.Bar(name=&#39;File hash&#39;, x=CVE_sorted, y=file_sorted), go.Bar(name=&#39;Domain/hostname&#39;, x=CVE_sorted, y=domain_sorted), go.Bar(name=&#39;IP&#39;, x=CVE_sorted, y=ip_sorted), go.Bar(name=&#39;URL&#39;, x=CVE_sorted, y=URL_sorted), go.Bar(name=&#39;Email&#39;, x=CVE_sorted, y=email_sorted), go.Bar(name=&#39;YARA Rule&#39;, x=CVE_sorted, y=yara_sorted) ]) # Change the bar mode fig.update_layout(width=1000, height=800, barmode=&#39;stack&#39;, title={ &#39;text&#39;: &quot;Alienvault OTX - TOP CVEs by unique IOCs, Q1 2020&quot;, &#39;y&#39;: 0.9, &#39;x&#39;: 0.5, &#39;xanchor&#39;: &#39;center&#39;, &#39;yanchor&#39;: &#39;top&#39;}, legend=dict(x=0.6, y=0.6) ) fig.update_yaxes(title_text=&quot;Count of unique linked IOC&quot;) fig.update_xaxes(title_text=&quot;CVE&quot;) fig.add_annotation(x=&#39;CVE-2019-2215&#39;, y= 750, text = &#39;Linux kernel use-after-free in binder.c&#39;, textangle = -90, showarrow=False) fig.add_annotation(x=&#39;CVE-2020-10189&#39;, y = 450, text = &#39;Zoho ManageEngine RCE&#39;, textangle = -90, showarrow=False) fig.add_annotation(x=&#39;CVE-2019-1653&#39;, y = 300, text = &#39;Cisco SMB VPN&#39;, textangle = -90, showarrow=False) fig.add_annotation(x=&#39;CVE-2019-1652&#39;, y = 300, text = &#39;Cisco SMB VPN&#39;, textangle = -90, showarrow=False) fig.add_annotation(x=&#39;CVE-2020-10198&#39;, y = 300, text = &#39;Mistype of CVE-2020-10189&#39;, textangle = -90, showarrow=False) fig.add_annotation(x=&#39;CVE-2020-10189&#39;, y = 450, text = &#39;Zoho ManageEngine RCE&#39;, textangle = -90, showarrow=False) fig.add_annotation(x=&#39;CVE-2019-1637&#39;, y = 300, text = &#39;Cisco WebEx RCE&#39;, textangle = -90, showarrow=False) fig.add_annotation(x=&#39;CVE-2019-11510&#39;, y = 200, text = &#39;Pulse Secure URI&#39;, textangle = -90, showarrow=False) fig.add_annotation(x=&#39;CVE-2019-0604&#39;, y = 300, text = &#39;MS SharePoint RCE&#39;, textangle = -90, showarrow=False) fig.add_annotation(x=&#39;CVE-2019-1579&#39;, y = 200, text = &#39;PAN OS RCE&#39;, textangle = -90, showarrow=False) fig.show() .",
            "url": "https://kuznetsov-a.github.io/fastpages/vulenrabilities%20management/risk%20management/threat%20intelligence/2020/03/31/OTX-CVE-Publish.html",
            "relUrl": "/vulenrabilities%20management/risk%20management/threat%20intelligence/2020/03/31/OTX-CVE-Publish.html",
            "date": " • Mar 31, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://kuznetsov-a.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://kuznetsov-a.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}